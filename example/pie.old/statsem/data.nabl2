module statsem/data

imports

  signatures/-

rules // Data definition

  [[ DataDef(DataDefMods(mods), id_type, super, impl) ^ (s) ]] :=
    Type{id_type} <- s,
    Type{id_type}.mods := mods !,
    
    ty == DataTy(Type{id_type}),
    Type{id_type} : ty !,
    [[ super ^ (s, ty) ]],
    
    new s_data,
    s_data -P-> s,
    Type{id_type} =I=> s_data,
    [[ impl ^ (s_data, ty) ]],
    distinct/name D(s_data)/Func | error "Duplicate functions" @NAMES.

  [[ NoSuperType() ^ (_, _) ]] := true.
  [[ SuperType(id_type) ^ (s, ty_type_outer) ]] :=
    Type{id_type} -> s,
    Type{id_type} |-> t,
    t : ty,
    ty_type_outer <! ty.

rules // Java foreign data definition

  [[ JavaDataImpl(id_class_java, membs) ^ (s, ty_type_outer) ]] :=
    ty_type_outer == DataTy(occ_type_outer),
    occ_type_outer.javaClassId := id_class_java !,
    occ_type_outer.kind := JavaTypeKind() !,
    Map1 [[ membs ^ (s) ]].

  [[ JavaFuncDef(FuncHead(id_func, params, ty_out)) ^ (s) ]] :=
    Func{id_func} <- s,
    [[ params ^ (s) : tys_in ]],
    [[ ty_out ^ (s) : ty_out_bound ]],
    ty == FuncTy(tys_in, ty_out_bound),
    Func{id_func} : ty !.

rules // TODO: PIE data definition
