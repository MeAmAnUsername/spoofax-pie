module statsem/func_def

imports

  signatures/-

rules // Function definition

  [[ FuncDef(FuncHead(id_func, params, ty_out), impl) ^ (s) ]] :=
    Func{id_func} <- s,
    new s_func,
    s_func -P-> s,
    [[ params ^ (s_func) : tys_in ]],
    new s_func_out,
    s_func_out -P-> s_func,
    [[ ty_out ^ (s) : ty_out_bound ]],
    ty == FuncTy(tys_in, ty_out_bound),
    Func{id_func} : ty !,
    [[ impl ^ (s_func, ty, Func{id_func}) ]],
    distinct/name D(s_func)/Var | error "Duplicate variables" @NAMES.

rules // Parameters

  [[ Params(params) ^ (s) : tys ]] :=
    Map1T [[ params ^ (s) : tys ]].

  [[ Param(ty) ^ (s) : ty_bound ]] :=
    [[ ty ^ (s) : ty_bound ]].
    
  [[ NParam(id_var, ty) ^ (s) : ty_bound ]] :=
     Var{id_var} <- s,
     Var{id_var}.kind := InputVarKind() !,
     [[ ty ^ (s) : ty_bound ]],
     Var{id_var} : ty_bound !.

rules // Function implementations

  [[ JavaForeignFuncImpl(id_class_java, id_method_java) ^ (s, _, occ_func_outer) ]] :=
    occ_func_outer.kind         := JavaForeignFuncKind() !,
    occ_func_outer.javaClassId  := id_class_java !,
    occ_func_outer.javaMethodId := id_method_java !.

  [[ PieForeignFuncImpl(id_class_java) ^ (s, _, occ_func_outer) ]] :=
    occ_func_outer.kind        := PieForeignFuncKind() !,
    occ_func_outer.javaClassId := id_class_java !.

  [[ PieFuncImpl(body, key) ^ (s, ty_func_def, occ_func_outer) ]] :=
    occ_func_outer.kind := PieFuncKind() !,
    [[ body ^ (s, ty_func_def) : ty_body ]],
    ty_func_def == FuncTy(_, ty_ret_expected),
    ty_body <? ty_ret_expected | error $[Type mismatch: expected [ty_ret_expected], got [ty_body]] @ body,
    PieKeyFunc [[ key ^ (s, ty_func_def) ]].

  PieKeyFunc [[ None()           ^ (s, ty_func_def) ]] := true.
  PieKeyFunc [[ PieKeyFunc(body) ^ (s, ty_func_def) ]] := [[ body ^ (s, ty_func_def) : _ ]].
  