module gen/java/func_def

imports

  libspoofax/stratego/debug

  signatures/-
  signatures/lex/-
  signatures/impl/-
  
  gen/java/type
  gen/java/func_body
  gen/idtype-tuples
  gen/util

rules // PIE function definitions

  p2j-def:
    FuncDef(FuncHead(funcId, params, type), PieFuncImpl(body, optKeyBody)) -> str
    with
      className   := <pie-sanitize-class-id> funcId
    with
    {| InputKind, InjectValues:
      (inputName , inputDataClass)  := <p2j-pie-func-impl-inputsig(|className)> params
    ; (outputName, outputDataClass) := <p2j-pie-func-impl-outputsig(|className)> type
    ; (execStmts, execExp)          := <p2j-pie-func-impl-body> body
    ; keyImpl                       := <p2j-pie-func-key-body> optKeyBody
    ; injectTuples                  := <bagof-InjectValues; make-set>
    ; fields                        := <map(type-tuple-to-field); pie-concat-nl> injectTuples
    ; constructorParams             := <map(type-tuple-to-param); pie-concat-commanl> injectTuples
    ; assignments                   := <map(type-tuple-to-assignment); pie-concat-nl> injectTuples
    ; returnValue                   := <?UnitTy(); !$[None.instance] <+ !execExp> type
   |}
    with
      rules(ModuleBindings :+= $[bindTaskDef([className].class, "[className]");])
    with
      str := 
$[class [className] implements TaskDef<[inputName], [outputName]> {
  [fields]
  
  @Inject
  [className](
    [constructorParams]
  ) {
    [assignments]
  }
  private static final String _id = "[className]";
  
  [inputDataClass]
  
  [outputDataClass]
  
  public String getId() {
    return _id;
  }
  
  @Override
  public Serializable key([inputName] input) {
    [keyImpl]
  }
  
  @Override
  public [outputName] exec(ExecContext execContext, [inputName] input) throws Exception {
    try {
      [<pie-concat-nl> execStmts]
      return [returnValue];
    } catch (Util.WrapperException e) {
      throw e.getWrappedException();
    }
  }
}
]

  p2j-pie-func-impl-body():
    Block(exps) -> result  
    with
      numExps                   := <length> exps
    ; restExps                  := <take(|<dec> numExps)> exps 
    ; restStmtStrs              := <map(try-p2j-exp); map(Fst); concat> restExps
    ; lastExp                   := <last> exps
    ; (lastStmtStr, lastExpStr) := <p2j-pie-func-impl-returnvalue> lastExp
    ; stmtStrs                  := <concat> [restStmtStrs, lastStmtStr]
    ; result                    := (stmtStrs, lastExpStr)

  p2j-pie-func-impl-body():
    EmptyBlock() -> ([], <Snd> <p2j-type-sig> UnitLit())

  p2j-pie-func-impl-body():
    exp -> result
    where
      <not(?Block(_) <+ ?EmptyBlock())> exp
    with
      (expStmtStrs, expStr) := <try-p2j-exp> exp
    ; returnValue           := <p2j-pie-func-impl-returnvalue> expStr
    ; result                := (expStmtStrs, returnValue)

  
  p2j-pie-func-impl-returnvalue:
    exp -> result
    where
      <pie-ast-type; (?TupleTy(_) <+ NullableTy(?TupleTy(_)))> exp
    with
      (expStmtStrs, expStr) := <try-p2j-exp> exp
    ; resultExpStr          := $[Output.fromTuple([expStr])]
    ; result                := (expStmtStrs, resultExpStr)

  p2j-pie-func-impl-returnvalue:
    exp -> <try-p2j-exp> exp
    where
      <pie-ast-type; not(?TupleTy(_))> exp

  p2j-pie-func-impl-inputsig(|className):
    Params(params) -> ("None", "")
    where
      0 := <length> params
    with 
      rules(InputKind := 0)
      
  p2j-pie-func-impl-inputsig(|className):
    p@Params(params) -> (tySig, "")
    where
      1 := <length> params
    with
      [(_, ty)] := <pie-idtype-tuples> p
    ; tySig     := <p2j-type-sig> ty
    with 
      rules(InputKind := 1)
    
  p2j-pie-func-impl-inputsig(|className):
    p@Params(params) -> ($[[className].Input], $[[dataClassStr]["\n"]])
    where
      length := <length> params
    ; <gt> (length, 1)
    with
      idTypeTuples := <pie-idtype-tuples> p
    ; dataClassStr := <p2j-type-generate-dataclass(|"Input")> idTypeTuples
    with 
      rules(InputKind := 2)

    
  p2j-pie-func-impl-outputsig(|className):
    ty -> (<p2j-type-sig> ty, "")
    where
      <not(?TupleTy(_)); not(?NullableTy(TupleTy(_)))> ty
      
  p2j-pie-func-impl-outputsig(|className):
    ty -> ($[[className].Output], $[[dataClassStr]["\n\n"]])
    where
      <?TupleTy(_)> ty
    with
      idTypeTuples := <pie-idtype-tuples> ty
    ; dataClassStr := <p2j-type-generate-dataclass(|"Output")> idTypeTuples

  p2j-pie-func-impl-outputsig(|className):
    ty -> ($[[className].Output?], $[[dataClassStr]["\n\n"]])
    where
      <?NullableTy(tty@TupleTy(_))> ty
    with
      idTypeTuples := <pie-idtype-tuples> tty
    ; dataClassStr := <p2j-type-generate-dataclass(|"Output")> idTypeTuples

    
  p2j-pie-func-key-body:
    None() -> "return input;"
    
  p2j-pie-func-key-body:
    PieKeyFunc(exp) -> result 
    with
      (expStmtStrs, expStr) := <try-p2j-exp> exp
    ; stmtStr               := <pie-concat-nl> expStmtStrs
    ; result                := $[[stmtStr]["\n"]return [expStr];]
