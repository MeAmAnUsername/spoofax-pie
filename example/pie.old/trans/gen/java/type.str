module gen/java/type

imports

  libspoofax/stratego/debug

  signatures/-
  signatures/lex/-
  signatures/impl/-

  statsem/pie
  
  gen/idtype-tuples
  gen/util

rules

  p2j-type-sig: UnitTy() -> "None"
  p2j-type-sig: BoolTy() -> "Boolean"
  p2j-type-sig: IntTy()  -> "Integer"
  p2j-type-sig: StrTy()  -> "String"
  p2j-type-sig: PathTy() -> "FSPath"
  p2j-type-sig: TopTy()  -> "Object"
  p2j-type-sig: NullTy()  -> "Void"

  p2j-type-sig:
    DataTy(occ) -> javaClassId
    where 
      JavaTypeKind() := <pie-prop(|"Type", "kind")> occ
    ; <pie-prop(|"Type", "mods"); not(collect-one(?Transient()))> occ
    with  
      javaClassId := <pie-prop(|"Type", "javaClassId")> occ

  p2j-type-sig:
    DataTy(occ) -> $[OutTransient<[javaClassId]>]
    where 
      JavaTypeKind() := <pie-prop(|"Type", "kind")> occ
    ; <pie-prop(|"Type", "mods"); collect-one(?Transient())> occ
    with  
      javaClassId := <pie-prop(|"Type", "javaClassId")> occ


  p2j-type-sig: 
    TupleTy(tys) -> $[Tuple[length]<[tyStr]>]
    with
      length := <length> tys
    ; tyStr  := <map(p2j-type-sig); pie-concat-comma> tys

  p2j-type-sig: ListTy(ty)     -> $[ArrayList<[<p2j-type-sig> ty]>]
  p2j-type-sig: NullableTy(ty) -> $[[<p2j-type-sig> ty]]
  
rules

  p2j-type-generate-dataclass(|name):
    idTypeTuples -> 
$[public static final class [name] extends [tupleTy]<[tupleTypes]> implements Serializable {
  public [name]([params]) {
    super([callParams]);
  }
  
  @Nullable
  public static [name] fromTuple(@Nullable [tupleTy]<[tupleTypes]> tuple) {
    if (tuple == null) {
      return null;
    }
    return new [name]([tupleNumParams]);
  }
  [getters]
}]
    with
      tupleTy           := $[Tuple[<length> idTypeTuples]]
    ; tys               := <map(Snd)> idTypeTuples
    ; typeStrs          := <map(p2j-type-sig)> tys
    ; idTypeStrTuples   := <zip> (<map(Fst)> idTypeTuples, typeStrs)
    ; getterStrs        := <nmap(type-tuple-to-getter | 1)> idTypeStrTuples
    ; getters           := <pie-concat-nl> getterStrs
    ; paramStrs         := <map(type-tuple-to-param)> idTypeStrTuples
    ; params            := <pie-concat-comma> paramStrs
    ; callParamStrs     := <map(type-tuple-to-call-param)> idTypeStrTuples
    ; callParams        := <pie-concat-comma> callParamStrs
    ; tupleNumParamStrs := <nmap(type-tuple-to-tuple-field-get | 1)> idTypeStrTuples
    ; tupleNumParams    := <pie-concat-comma> tupleNumParamStrs
    ; tupleTypeStrs     := <map(type-tuple-to-type)> idTypeStrTuples
    ; tupleTypes        := <pie-concat-comma> tupleTypeStrs

  type-tuple-to-field: (varId, ty) -> $[public final [ty] [varId];]
  type-tuple-to-type: (varId, ty) -> ty
  type-tuple-to-tuple-field-get(|number): _ -> $[tuple.component[number]()]
  type-tuple-to-getter(|number): (varId, ty) -> 
    $[
    public final [ty] get_[varId]() {
      return component[number]();
    }]
  type-tuple-to-param: (varId, ty) -> $[[ty] [varId]]
  type-tuple-to-call-param: (varId, ty) -> varId
  type-tuple-to-assignment: (varId, ty) -> $[this.[varId] = [varId];]
