module gen/kotlin/func_def

imports

  libspoofax/stratego/debug

  signatures/-
  signatures/lex/-
  signatures/impl/-
  
  gen/kotlin/type
  gen/kotlin/func_body
  gen/idtype-tuples
  gen/util

rules // PIE function definitions

  p2k-def:
    FuncDef(FuncHead(funcId, params, type), PieFuncImpl(body, optKeyBody)) -> str
    with
      className   := <pie-sanitize-class-id> funcId
    with
    {| InputKind, InjectValues:
      (inputName , inputDataClass)  := <p2k-pie-func-impl-inputsig(|className)> params
    ; (outputName, outputDataClass) := <p2k-pie-func-impl-outputsig(|className)> type
    ; execImpl     := <p2k-pie-func-impl-body> body
    ; keyImpl      := <p2k-pie-func-key-body> optKeyBody
    ; injectValues := <bagof-InjectValues; make-set; pie-concat-commanl>
    ; emptyReturn  := <?UnitTy(); !"return Unit.instance" <+ !""> type
   |}
    with
      rules(ModuleBindings :+= $[bindTaskDef<[className]>(taskDefsBinder, "[className]")])
    with
      str := 
$[class [className] @Inject constructor(
  [injectValues]
) : TaskDef<[inputName], [outputName]> {
  companion object {
    const val id = "[className]"
  }
  [inputDataClass][outputDataClass]override val id = Companion.id
  override fun key(input: [inputName]): Key = [keyImpl]
  override fun ExecContext.exec(input: [inputName]): [outputName] = [execImpl]
}
]

  p2k-pie-func-impl-body:
    Block(exps) -> 
$[run {
  [restExpsStr]
  [lastExpStr]
}]
    with
      numExps     := <length> exps
    ; restExps    := <take(|<dec> numExps)> exps 
    ; restExpsStr := <map(try-p2k-exp); pie-sep-concat(|";\n")> restExps
    ; lastExp     := <last> exps
    ; lastExpStr  := <p2k-pie-func-impl-returnvalue> lastExp

  p2k-pie-func-impl-body:
    EmptyBlock() -> "run { Unit.instance }"

  p2k-pie-func-impl-body:
    exp -> <try-p2k-exp> exp
    where
      <not(?Block(_) <+ ?EmptyBlock())> exp

  
  p2k-pie-func-impl-returnvalue:
    exp -> $[output([expStr])]
    where
      <pie-ast-type; (?TupleTy(_) <+ NullableTy(?TupleTy(_)))> exp
    with
      expStr := <try-p2k-exp> exp
      
  p2k-pie-func-impl-returnvalue:
    exp -> expStr
    where
      <pie-ast-type; not(?TupleTy(_))> exp
    with
      expStr := <try-p2k-exp> exp


  p2k-pie-func-impl-inputsig(|className):
    Params(params) -> ("None", "")
    where
      0 := <length> params
    with 
      rules(InputKind := 0)
      
  p2k-pie-func-impl-inputsig(|className):
    p@Params(params) -> (tySig, "")
    where
      1 := <length> params
    with
      [(_, ty)] := <pie-idtype-tuples> p
    ; tySig     := <p2k-type-sig> ty
    with 
      rules(InputKind := 1)
    
  p2k-pie-func-impl-inputsig(|className):
    p@Params(params) -> ($[[className].Input], $[[dataClassStr]["\n"]])
    where
      length := <length> params
    ; <gt> (length, 1)
    with
      idTypeTuples := <pie-idtype-tuples> p
    ; dataClassStr := <p2k-type-generate-dataclass(|"Input")> idTypeTuples
    with 
      rules(InputKind := 2)

    
  p2k-pie-func-impl-outputsig(|className):
    ty -> (<p2k-type-sig> ty, "")
    where
      <not(?TupleTy(_)); not(?NullableTy(TupleTy(_)))> ty
      
  p2k-pie-func-impl-outputsig(|className):
    ty -> ($[[className].Output], $[[dataClassStr]["\n"][outputFun]["\n\n"]])
    where
      <?TupleTy(_)> ty
    with
      idTypeTuples := <pie-idtype-tuples> ty
    ; dataClassStr := <p2k-type-generate-dataclass(|"Output")> idTypeTuples
    ; outputFun    := $[private fun output(tuple: [<p2k-type-sig> ty]) = Output(tuple)]

  p2k-pie-func-impl-outputsig(|className):
    ty -> ($[[className].Output?], $[[dataClassStr]["\n"][outputFun]["\n\n"]])
    where
      <?NullableTy(tty@TupleTy(_))> ty
    with
      idTypeTuples := <pie-idtype-tuples> tty
    ; dataClassStr := <p2k-type-generate-dataclass(|"Output")> idTypeTuples
    ; outputFun    := $[private fun output(tuple: [<p2k-type-sig> ty]) = if(tuple == null) null else Output(tuple)]

    
  p2k-pie-func-key-body:
    None() -> "input"
    
  p2k-pie-func-key-body:
    PieKeyFunc(exp) -> <try-p2k-exp> exp
